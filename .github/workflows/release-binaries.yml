name: release-binaries

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu
            runner: ubuntu-latest
            arch: x86_64
          - os: macos
            runner: macos-latest     # Apple Silicon (arm64)
            arch: arm64
          - os: macos
            runner: macos-13         # Intel (x86_64)
            arch: x86_64
          - os: windows
            runner: windows-latest
            arch: x86_64

    steps:
      - uses: actions/checkout@v4

      # Pin to a PyInstaller-friendly Python; avoids sudden 3.13 breakage
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install . pyinstaller

      # Build: onedir for macOS (so we can sign every binary), onefile elsewhere
      - name: Build (macOS onedir)
        if: runner.os == 'macOS'
        run: |
          pyinstaller wiki_extractor/cli.py --name wiki-extractor --onedir

      - name: Build (Linux/Windows onefile)
        if: runner.os != 'macOS'
        run: |
          pyinstaller wiki_extractor/cli.py --name wiki-extractor --onefile

      # --- macOS: sign everything in the onedir, DMG -> notarize -> staple ---
      - name: Sign & Notarize macOS DMG (onedir)
        if: runner.os == 'macOS'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}                 # base64-encoded .p12 (Developer ID Application + private key)
          MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}               # Apple ID email
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        shell: bash
        run: |
          set -euo pipefail

          # Keychain setup (use real *.keychain-db path)
          echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12
          KEYCHAIN_NAME="build.keychain-db"
          KEYCHAIN_PATH="$HOME/Library/Keychains/$KEYCHAIN_NAME"

          security create-keychain -p temp "$KEYCHAIN_NAME"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"     # keep unlocked ~6h
          security unlock-keychain -p temp "$KEYCHAIN_PATH"
          security import certificate.p12 -k "$KEYCHAIN_PATH" -P "$MACOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign -A
          security list-keychains -d user -s "$KEYCHAIN_PATH"
          security default-keychain -s "$KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple: -s -k temp "$KEYCHAIN_PATH"

          # Resolve identity SHA (more reliable than display name)
          security find-identity -v -p codesigning "$KEYCHAIN_PATH"
          ID_SHA=$(security find-identity -v -p codesigning "$KEYCHAIN_PATH" | awk '/Developer ID Application/ {print $2; exit}')
          test -n "$ID_SHA"

          APPDIR="dist/wiki-extractor"           # PyInstaller onedir output
          MAINEXE="$APPDIR/wiki-extractor"

          # Sign inner binaries first (dylibs, .so/.pyd, embedded 'Python' files)
          # Note: xargs -0 handles spaces safely; some dirs may not exist in all builds, so || true
          find "$APPDIR" -type f \( -name "*.dylib" -o -name "*.so" -o -name "*.pyd" -o -name "Python" \) -print0 \
            | xargs -0 -I{} codesign --force --timestamp --options runtime --keychain "$KEYCHAIN_PATH" --sign "$ID_SHA" "{}" || true

          # Sign frameworks as bundles (after inner files)
          find "$APPDIR" -type d -name "*.framework" -print0 \
            | xargs -0 -I{} codesign --force --timestamp --options runtime --keychain "$KEYCHAIN_PATH" --sign "$ID_SHA" "{}" || true

          # Sign the main executable last
          codesign --force --timestamp --options runtime --keychain "$KEYCHAIN_PATH" --sign "$ID_SHA" "$MAINEXE"

          # Local verification (donâ€™t fail CI if Gatekeeper is picky)
          codesign -dv --verbose=4 "$MAINEXE" || true
          spctl --assess --type exec -vvv "$MAINEXE" || true

          # Build DMG from the onedir tree (read-only DMG preserves signatures)
          mkdir -p dist/dmgroot
          cp -a "$APPDIR" dist/dmgroot/
          cat > dist/dmgroot/README.txt <<'EOF'
          WikiExtractor (CLI)
          --------------------
          Option A: Run directly from inside the folder:
            ./wiki-extractor/wiki-extractor --help

          Option B (recommended): copy the executable into your PATH:
            sudo cp wiki-extractor/wiki-extractor /usr/local/bin/
            wiki-extractor --help
          EOF

          DMG_PATH="dist/wiki-extractor-macos-${{ matrix.arch }}.dmg"
          hdiutil create -volname "WikiExtractor" \
            -srcfolder dist/dmgroot \
            -ov -fs HFS+ -format UDZO "$DMG_PATH"

          # Notarize + staple the DMG
          xcrun notarytool submit "$DMG_PATH" \
            --apple-id "$APPLE_DEVELOPER_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait

          xcrun stapler staple "$DMG_PATH"
          xcrun stapler validate "$DMG_PATH"
          spctl --assess --type open -vvv "$DMG_PATH" || true

          # Cleanup secrets/materials
          security delete-keychain "$KEYCHAIN_PATH"
          rm -f certificate.p12
          rm -rf dist/dmgroot

      # --- Rename & upload artifacts per-OS ---

      - name: Rename Linux artifact
        if: runner.os == 'Linux'
        run: mv dist/wiki-extractor dist/wiki-extractor-linux-x86_64

      - name: Rename Windows artifact
        if: runner.os == 'Windows'
        run: mv dist/wiki-extractor.exe dist/wiki-extractor-windows-x86_64.exe

      - name: Upload macOS DMG
        if: runner.os == 'macOS'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/wiki-extractor-macos-${{ matrix.arch }}.dmg

      - name: Upload Linux artifact
        if: runner.os == 'Linux'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/wiki-extractor-linux-x86_64

      - name: Upload Windows artifact
        if: runner.os == 'Windows'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/wiki-extractor-windows-x86_64.exe
