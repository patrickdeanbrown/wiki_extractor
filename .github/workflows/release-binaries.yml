name: release-binaries

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu
            runner: ubuntu-latest
            arch: x86_64
          - os: macos
            runner: macos-latest     # Apple Silicon (arm64 only)
            arch: arm64
          - os: windows
            runner: windows-latest
            arch: x86_64

    steps:
      - uses: actions/checkout@v4

      # Pin Python to avoid fresh 3.13 packaging wrinkles with PyInstaller
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install . pyinstaller

      # Build: onefile everywhere (macOS will be signed with LV entitlement)
      - name: Build (PyInstaller onefile)
        run: |
          pyinstaller -m wiki_extractor.cli --name wiki-extractor --onefile

      # ---------- macOS: sign single-file with LV entitlement, ZIP-notarize (no stapling) ----------
      - name: Sign & Notarize macOS single-file (ZIP; no stapling)
        if: runner.os == 'macOS'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}                 # base64-encoded .p12 (Developer ID Application + private key)
          MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}               # Apple ID email
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        shell: bash
        run: |
          set -euo pipefail

          BIN="dist/wiki-extractor"                         # PyInstaller output
          OUT_BASENAME="wiki-extractor-macos-${{ matrix.arch }}"
          OUT_FILE="dist/${OUT_BASENAME}"
          ZIP_FILE="dist/${OUT_BASENAME}.zip"

          # Create entitlements (disable Library Validation for onefile runtime)
          cat > entitlements.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>com.apple.security.cs.disable-library-validation</key>
              <true/>
            </dict>
          </plist>
          PLIST

          # Keychain setup (use real *.keychain-db path)
          echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12
          KEYCHAIN_NAME="build.keychain-db"
          KEYCHAIN_PATH="$HOME/Library/Keychains/$KEYCHAIN_NAME"

          security create-keychain -p temp "$KEYCHAIN_NAME"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p temp "$KEYCHAIN_PATH"
          security import certificate.p12 -k "$KEYCHAIN_PATH" -P "$MACOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign -A
          security list-keychains -d user -s "$KEYCHAIN_PATH"
          security default-keychain -s "$KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple: -s -k temp "$KEYCHAIN_PATH"

          # Resolve identity SHA (robust)
          security find-identity -v -p codesigning "$KEYCHAIN_PATH"
          ID_SHA=$(security find-identity -v -p codesigning "$KEYCHAIN_PATH" | awk '/Developer ID Application/ {print $2; exit}')
          test -n "$ID_SHA"

          # Ensure executable bit and give it an arch-specific name
          chmod +x "$BIN"
          cp "$BIN" "$OUT_FILE"

          # Sign with Hardened Runtime + Disable Library Validation entitlement
          codesign --force --timestamp --options runtime \
            --entitlements entitlements.plist \
            --keychain "$KEYCHAIN_PATH" --sign "$ID_SHA" "$OUT_FILE"

          # Diagnostics (non-fatal)
          codesign -dv --verbose=4 "$OUT_FILE" || true
          spctl --assess --type exec -vvv "$OUT_FILE" || true

          # ZIP the single file for notarization (Apple scans the binary inside)
          /usr/bin/zip -q -j "$ZIP_FILE" "$OUT_FILE"

          # Notarize and wait for the result (no stapling for raw executables)
          xcrun notarytool submit "$ZIP_FILE" \
            --apple-id "$APPLE_DEVELOPER_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait

          # Cleanup secrets/materials
          security delete-keychain "$KEYCHAIN_PATH"
          rm -f certificate.p12 entitlements.plist

      # ---------- Rename Linux/Windows artifacts ----------
      - name: Rename Linux artifact
        if: runner.os == 'Linux'
        run: mv dist/wiki-extractor dist/wiki-extractor-linux-x86_64

      - name: Rename Windows artifact
        if: runner.os == 'Windows'
        run: mv dist/wiki-extractor.exe dist/wiki-extractor-windows-x86_64.exe

      # ---------- Upload per-OS artifacts ----------
      - name: Upload macOS single-file
        if: runner.os == 'macOS'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/wiki-extractor-macos-${{ matrix.arch }}

      - name: Upload Linux artifact
        if: runner.os == 'Linux'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/wiki-extractor-linux-x86_64

      - name: Upload Windows artifact
        if: runner.os == 'Windows'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/wiki-extractor-windows-x86_64.exe
